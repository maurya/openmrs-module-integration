//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.28 at 06:15:45 PM EDT 
//


package org.openmrs.module.integration.api.jaxb;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for metaData complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="metaData">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice>
 *         &lt;element name="categories">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="category" maxOccurs="unbounded">
 *                     &lt;complexType>
 *                       &lt;complexContent>
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           &lt;sequence>
 *                             &lt;element name="concept">
 *                               &lt;complexType>
 *                                 &lt;complexContent>
 *                                   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                     &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                     &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *                                     &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *                                     &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                   &lt;/restriction>
 *                                 &lt;/complexContent>
 *                               &lt;/complexType>
 *                             &lt;/element>
 *                             &lt;element name="dataDimension" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *                             &lt;element name="categoryOptions">
 *                               &lt;complexType>
 *                                 &lt;complexContent>
 *                                   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                     &lt;sequence>
 *                                       &lt;element name="categoryOption" maxOccurs="unbounded">
 *                                         &lt;complexType>
 *                                           &lt;complexContent>
 *                                             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                               &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                               &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                               &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                               &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                             &lt;/restriction>
 *                                           &lt;/complexContent>
 *                                         &lt;/complexType>
 *                                       &lt;/element>
 *                                     &lt;/sequence>
 *                                   &lt;/restriction>
 *                                 &lt;/complexContent>
 *                               &lt;/complexType>
 *                             &lt;/element>
 *                           &lt;/sequence>
 *                           &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                           &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *                           &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *                           &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                         &lt;/restriction>
 *                       &lt;/complexContent>
 *                     &lt;/complexType>
 *                   &lt;/element>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="categoryOptionCombos">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="categoryOptionCombo" maxOccurs="unbounded" minOccurs="0">
 *                     &lt;complexType>
 *                       &lt;complexContent>
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           &lt;sequence>
 *                             &lt;element name="categoryCombo">
 *                               &lt;complexType>
 *                                 &lt;complexContent>
 *                                   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                     &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                     &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *                                     &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *                                     &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                   &lt;/restriction>
 *                                 &lt;/complexContent>
 *                               &lt;/complexType>
 *                             &lt;/element>
 *                             &lt;element name="categoryOptions">
 *                               &lt;complexType>
 *                                 &lt;complexContent>
 *                                   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                     &lt;sequence>
 *                                       &lt;element name="categoryOption" maxOccurs="unbounded" minOccurs="0">
 *                                         &lt;complexType>
 *                                           &lt;complexContent>
 *                                             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                               &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                               &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *                                               &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *                                               &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                             &lt;/restriction>
 *                                           &lt;/complexContent>
 *                                         &lt;/complexType>
 *                                       &lt;/element>
 *                                     &lt;/sequence>
 *                                   &lt;/restriction>
 *                                 &lt;/complexContent>
 *                               &lt;/complexType>
 *                             &lt;/element>
 *                           &lt;/sequence>
 *                           &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                           &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *                           &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *                           &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                         &lt;/restriction>
 *                       &lt;/complexContent>
 *                     &lt;/complexType>
 *                   &lt;/element>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="organisationUnits">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="organisationUnit" maxOccurs="unbounded" minOccurs="0">
 *                     &lt;complexType>
 *                       &lt;complexContent>
 *                         &lt;extension base="{}OrgUnitType">
 *                           &lt;sequence>
 *                             &lt;element name="parent" type="{}OrgUnitType" minOccurs="0"/>
 *                             &lt;element name="openingDate" type="{http://www.w3.org/2001/XMLSchema}date" minOccurs="0"/>
 *                             &lt;element name="active" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *                           &lt;/sequence>
 *                         &lt;/extension>
 *                       &lt;/complexContent>
 *                     &lt;/complexType>
 *                   &lt;/element>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/choice>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "metaData", propOrder = {
    "categories",
    "categoryOptionCombos",
    "organisationUnits"
})
public class MetaData
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected MetaData.Categories categories;
    protected MetaData.CategoryOptionCombos categoryOptionCombos;
    protected MetaData.OrganisationUnits organisationUnits;

    /**
     * Gets the value of the categories property.
     * 
     * @return
     *     possible object is
     *     {@link MetaData.Categories }
     *     
     */
    public MetaData.Categories getCategories() {
        return categories;
    }

    /**
     * Sets the value of the categories property.
     * 
     * @param value
     *     allowed object is
     *     {@link MetaData.Categories }
     *     
     */
    public void setCategories(MetaData.Categories value) {
        this.categories = value;
    }

    /**
     * Gets the value of the categoryOptionCombos property.
     * 
     * @return
     *     possible object is
     *     {@link MetaData.CategoryOptionCombos }
     *     
     */
    public MetaData.CategoryOptionCombos getCategoryOptionCombos() {
        return categoryOptionCombos;
    }

    /**
     * Sets the value of the categoryOptionCombos property.
     * 
     * @param value
     *     allowed object is
     *     {@link MetaData.CategoryOptionCombos }
     *     
     */
    public void setCategoryOptionCombos(MetaData.CategoryOptionCombos value) {
        this.categoryOptionCombos = value;
    }

    /**
     * Gets the value of the organisationUnits property.
     * 
     * @return
     *     possible object is
     *     {@link MetaData.OrganisationUnits }
     *     
     */
    public MetaData.OrganisationUnits getOrganisationUnits() {
        return organisationUnits;
    }

    /**
     * Sets the value of the organisationUnits property.
     * 
     * @param value
     *     allowed object is
     *     {@link MetaData.OrganisationUnits }
     *     
     */
    public void setOrganisationUnits(MetaData.OrganisationUnits value) {
        this.organisationUnits = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            MetaData.Categories theCategories;
            theCategories = this.getCategories();
            strategy.appendField(locator, this, "categories", buffer, theCategories);
        }
        {
            MetaData.CategoryOptionCombos theCategoryOptionCombos;
            theCategoryOptionCombos = this.getCategoryOptionCombos();
            strategy.appendField(locator, this, "categoryOptionCombos", buffer, theCategoryOptionCombos);
        }
        {
            MetaData.OrganisationUnits theOrganisationUnits;
            theOrganisationUnits = this.getOrganisationUnits();
            strategy.appendField(locator, this, "organisationUnits", buffer, theOrganisationUnits);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MetaData)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final MetaData that = ((MetaData) object);
        {
            MetaData.Categories lhsCategories;
            lhsCategories = this.getCategories();
            MetaData.Categories rhsCategories;
            rhsCategories = that.getCategories();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "categories", lhsCategories), LocatorUtils.property(thatLocator, "categories", rhsCategories), lhsCategories, rhsCategories)) {
                return false;
            }
        }
        {
            MetaData.CategoryOptionCombos lhsCategoryOptionCombos;
            lhsCategoryOptionCombos = this.getCategoryOptionCombos();
            MetaData.CategoryOptionCombos rhsCategoryOptionCombos;
            rhsCategoryOptionCombos = that.getCategoryOptionCombos();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "categoryOptionCombos", lhsCategoryOptionCombos), LocatorUtils.property(thatLocator, "categoryOptionCombos", rhsCategoryOptionCombos), lhsCategoryOptionCombos, rhsCategoryOptionCombos)) {
                return false;
            }
        }
        {
            MetaData.OrganisationUnits lhsOrganisationUnits;
            lhsOrganisationUnits = this.getOrganisationUnits();
            MetaData.OrganisationUnits rhsOrganisationUnits;
            rhsOrganisationUnits = that.getOrganisationUnits();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "organisationUnits", lhsOrganisationUnits), LocatorUtils.property(thatLocator, "organisationUnits", rhsOrganisationUnits), lhsOrganisationUnits, rhsOrganisationUnits)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            MetaData.Categories theCategories;
            theCategories = this.getCategories();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "categories", theCategories), currentHashCode, theCategories);
        }
        {
            MetaData.CategoryOptionCombos theCategoryOptionCombos;
            theCategoryOptionCombos = this.getCategoryOptionCombos();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "categoryOptionCombos", theCategoryOptionCombos), currentHashCode, theCategoryOptionCombos);
        }
        {
            MetaData.OrganisationUnits theOrganisationUnits;
            theOrganisationUnits = this.getOrganisationUnits();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "organisationUnits", theOrganisationUnits), currentHashCode, theOrganisationUnits);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof MetaData) {
            final MetaData copy = ((MetaData) draftCopy);
            if (this.categories!= null) {
                MetaData.Categories sourceCategories;
                sourceCategories = this.getCategories();
                MetaData.Categories copyCategories = ((MetaData.Categories) strategy.copy(LocatorUtils.property(locator, "categories", sourceCategories), sourceCategories));
                copy.setCategories(copyCategories);
            } else {
                copy.categories = null;
            }
            if (this.categoryOptionCombos!= null) {
                MetaData.CategoryOptionCombos sourceCategoryOptionCombos;
                sourceCategoryOptionCombos = this.getCategoryOptionCombos();
                MetaData.CategoryOptionCombos copyCategoryOptionCombos = ((MetaData.CategoryOptionCombos) strategy.copy(LocatorUtils.property(locator, "categoryOptionCombos", sourceCategoryOptionCombos), sourceCategoryOptionCombos));
                copy.setCategoryOptionCombos(copyCategoryOptionCombos);
            } else {
                copy.categoryOptionCombos = null;
            }
            if (this.organisationUnits!= null) {
                MetaData.OrganisationUnits sourceOrganisationUnits;
                sourceOrganisationUnits = this.getOrganisationUnits();
                MetaData.OrganisationUnits copyOrganisationUnits = ((MetaData.OrganisationUnits) strategy.copy(LocatorUtils.property(locator, "organisationUnits", sourceOrganisationUnits), sourceOrganisationUnits));
                copy.setOrganisationUnits(copyOrganisationUnits);
            } else {
                copy.organisationUnits = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MetaData();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="category" maxOccurs="unbounded">
     *           &lt;complexType>
     *             &lt;complexContent>
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 &lt;sequence>
     *                   &lt;element name="concept">
     *                     &lt;complexType>
     *                       &lt;complexContent>
     *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                           &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                           &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
     *                           &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
     *                           &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                         &lt;/restriction>
     *                       &lt;/complexContent>
     *                     &lt;/complexType>
     *                   &lt;/element>
     *                   &lt;element name="dataDimension" type="{http://www.w3.org/2001/XMLSchema}string"/>
     *                   &lt;element name="categoryOptions">
     *                     &lt;complexType>
     *                       &lt;complexContent>
     *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                           &lt;sequence>
     *                             &lt;element name="categoryOption" maxOccurs="unbounded">
     *                               &lt;complexType>
     *                                 &lt;complexContent>
     *                                   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                                     &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                                     &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                                     &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                                     &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                                   &lt;/restriction>
     *                                 &lt;/complexContent>
     *                               &lt;/complexType>
     *                             &lt;/element>
     *                           &lt;/sequence>
     *                         &lt;/restriction>
     *                       &lt;/complexContent>
     *                     &lt;/complexType>
     *                   &lt;/element>
     *                 &lt;/sequence>
     *                 &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                 &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
     *                 &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
     *                 &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *               &lt;/restriction>
     *             &lt;/complexContent>
     *           &lt;/complexType>
     *         &lt;/element>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "category"
    })
    public static class Categories
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(required = true)
        protected List<MetaData.Categories.Category> category;

        /**
         * Gets the value of the category property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the category property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getCategory().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link MetaData.Categories.Category }
         * 
         * 
         */
        public List<MetaData.Categories.Category> getCategory() {
            if (category == null) {
                category = new ArrayList<MetaData.Categories.Category>();
            }
            return this.category;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<MetaData.Categories.Category> theCategory;
                theCategory = (((this.category!= null)&&(!this.category.isEmpty()))?this.getCategory():null);
                strategy.appendField(locator, this, "category", buffer, theCategory);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof MetaData.Categories)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final MetaData.Categories that = ((MetaData.Categories) object);
            {
                List<MetaData.Categories.Category> lhsCategory;
                lhsCategory = (((this.category!= null)&&(!this.category.isEmpty()))?this.getCategory():null);
                List<MetaData.Categories.Category> rhsCategory;
                rhsCategory = (((that.category!= null)&&(!that.category.isEmpty()))?that.getCategory():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "category", lhsCategory), LocatorUtils.property(thatLocator, "category", rhsCategory), lhsCategory, rhsCategory)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<MetaData.Categories.Category> theCategory;
                theCategory = (((this.category!= null)&&(!this.category.isEmpty()))?this.getCategory():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "category", theCategory), currentHashCode, theCategory);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof MetaData.Categories) {
                final MetaData.Categories copy = ((MetaData.Categories) draftCopy);
                if ((this.category!= null)&&(!this.category.isEmpty())) {
                    List<MetaData.Categories.Category> sourceCategory;
                    sourceCategory = (((this.category!= null)&&(!this.category.isEmpty()))?this.getCategory():null);
                    @SuppressWarnings("unchecked")
                    List<MetaData.Categories.Category> copyCategory = ((List<MetaData.Categories.Category> ) strategy.copy(LocatorUtils.property(locator, "category", sourceCategory), sourceCategory));
                    copy.category = null;
                    if (copyCategory!= null) {
                        List<MetaData.Categories.Category> uniqueCategoryl = copy.getCategory();
                        uniqueCategoryl.addAll(copyCategory);
                    }
                } else {
                    copy.category = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new MetaData.Categories();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;sequence>
         *         &lt;element name="concept">
         *           &lt;complexType>
         *             &lt;complexContent>
         *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                 &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *                 &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
         *                 &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
         *                 &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *               &lt;/restriction>
         *             &lt;/complexContent>
         *           &lt;/complexType>
         *         &lt;/element>
         *         &lt;element name="dataDimension" type="{http://www.w3.org/2001/XMLSchema}string"/>
         *         &lt;element name="categoryOptions">
         *           &lt;complexType>
         *             &lt;complexContent>
         *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                 &lt;sequence>
         *                   &lt;element name="categoryOption" maxOccurs="unbounded">
         *                     &lt;complexType>
         *                       &lt;complexContent>
         *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                           &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *                           &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *                           &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *                           &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *                         &lt;/restriction>
         *                       &lt;/complexContent>
         *                     &lt;/complexType>
         *                   &lt;/element>
         *                 &lt;/sequence>
         *               &lt;/restriction>
         *             &lt;/complexContent>
         *           &lt;/complexType>
         *         &lt;/element>
         *       &lt;/sequence>
         *       &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *       &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
         *       &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
         *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "concept",
            "dataDimension",
            "categoryOptions"
        })
        public static class Category
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlElement(required = true)
            protected MetaData.Categories.Category.Concept concept;
            @XmlElement(required = true)
            protected String dataDimension;
            @XmlElement(required = true)
            protected MetaData.Categories.Category.CategoryOptions categoryOptions;
            @XmlAttribute(name = "name", required = true)
            protected String name;
            @XmlAttribute(name = "created", required = true)
            @XmlSchemaType(name = "dateTime")
            protected XMLGregorianCalendar created;
            @XmlAttribute(name = "lastUpdated", required = true)
            @XmlSchemaType(name = "dateTime")
            protected XMLGregorianCalendar lastUpdated;
            @XmlAttribute(name = "id", required = true)
            protected String id;

            /**
             * Gets the value of the concept property.
             * 
             * @return
             *     possible object is
             *     {@link MetaData.Categories.Category.Concept }
             *     
             */
            public MetaData.Categories.Category.Concept getConcept() {
                return concept;
            }

            /**
             * Sets the value of the concept property.
             * 
             * @param value
             *     allowed object is
             *     {@link MetaData.Categories.Category.Concept }
             *     
             */
            public void setConcept(MetaData.Categories.Category.Concept value) {
                this.concept = value;
            }

            /**
             * Gets the value of the dataDimension property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getDataDimension() {
                return dataDimension;
            }

            /**
             * Sets the value of the dataDimension property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setDataDimension(String value) {
                this.dataDimension = value;
            }

            /**
             * Gets the value of the categoryOptions property.
             * 
             * @return
             *     possible object is
             *     {@link MetaData.Categories.Category.CategoryOptions }
             *     
             */
            public MetaData.Categories.Category.CategoryOptions getCategoryOptions() {
                return categoryOptions;
            }

            /**
             * Sets the value of the categoryOptions property.
             * 
             * @param value
             *     allowed object is
             *     {@link MetaData.Categories.Category.CategoryOptions }
             *     
             */
            public void setCategoryOptions(MetaData.Categories.Category.CategoryOptions value) {
                this.categoryOptions = value;
            }

            /**
             * Gets the value of the name property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getName() {
                return name;
            }

            /**
             * Sets the value of the name property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setName(String value) {
                this.name = value;
            }

            /**
             * Gets the value of the created property.
             * 
             * @return
             *     possible object is
             *     {@link XMLGregorianCalendar }
             *     
             */
            public XMLGregorianCalendar getCreated() {
                return created;
            }

            /**
             * Sets the value of the created property.
             * 
             * @param value
             *     allowed object is
             *     {@link XMLGregorianCalendar }
             *     
             */
            public void setCreated(XMLGregorianCalendar value) {
                this.created = value;
            }

            /**
             * Gets the value of the lastUpdated property.
             * 
             * @return
             *     possible object is
             *     {@link XMLGregorianCalendar }
             *     
             */
            public XMLGregorianCalendar getLastUpdated() {
                return lastUpdated;
            }

            /**
             * Sets the value of the lastUpdated property.
             * 
             * @param value
             *     allowed object is
             *     {@link XMLGregorianCalendar }
             *     
             */
            public void setLastUpdated(XMLGregorianCalendar value) {
                this.lastUpdated = value;
            }

            /**
             * Gets the value of the id property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getId() {
                return id;
            }

            /**
             * Sets the value of the id property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setId(String value) {
                this.id = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    MetaData.Categories.Category.Concept theConcept;
                    theConcept = this.getConcept();
                    strategy.appendField(locator, this, "concept", buffer, theConcept);
                }
                {
                    String theDataDimension;
                    theDataDimension = this.getDataDimension();
                    strategy.appendField(locator, this, "dataDimension", buffer, theDataDimension);
                }
                {
                    MetaData.Categories.Category.CategoryOptions theCategoryOptions;
                    theCategoryOptions = this.getCategoryOptions();
                    strategy.appendField(locator, this, "categoryOptions", buffer, theCategoryOptions);
                }
                {
                    String theName;
                    theName = this.getName();
                    strategy.appendField(locator, this, "name", buffer, theName);
                }
                {
                    XMLGregorianCalendar theCreated;
                    theCreated = this.getCreated();
                    strategy.appendField(locator, this, "created", buffer, theCreated);
                }
                {
                    XMLGregorianCalendar theLastUpdated;
                    theLastUpdated = this.getLastUpdated();
                    strategy.appendField(locator, this, "lastUpdated", buffer, theLastUpdated);
                }
                {
                    String theId;
                    theId = this.getId();
                    strategy.appendField(locator, this, "id", buffer, theId);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof MetaData.Categories.Category)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final MetaData.Categories.Category that = ((MetaData.Categories.Category) object);
                {
                    MetaData.Categories.Category.Concept lhsConcept;
                    lhsConcept = this.getConcept();
                    MetaData.Categories.Category.Concept rhsConcept;
                    rhsConcept = that.getConcept();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "concept", lhsConcept), LocatorUtils.property(thatLocator, "concept", rhsConcept), lhsConcept, rhsConcept)) {
                        return false;
                    }
                }
                {
                    String lhsDataDimension;
                    lhsDataDimension = this.getDataDimension();
                    String rhsDataDimension;
                    rhsDataDimension = that.getDataDimension();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "dataDimension", lhsDataDimension), LocatorUtils.property(thatLocator, "dataDimension", rhsDataDimension), lhsDataDimension, rhsDataDimension)) {
                        return false;
                    }
                }
                {
                    MetaData.Categories.Category.CategoryOptions lhsCategoryOptions;
                    lhsCategoryOptions = this.getCategoryOptions();
                    MetaData.Categories.Category.CategoryOptions rhsCategoryOptions;
                    rhsCategoryOptions = that.getCategoryOptions();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "categoryOptions", lhsCategoryOptions), LocatorUtils.property(thatLocator, "categoryOptions", rhsCategoryOptions), lhsCategoryOptions, rhsCategoryOptions)) {
                        return false;
                    }
                }
                {
                    String lhsName;
                    lhsName = this.getName();
                    String rhsName;
                    rhsName = that.getName();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                        return false;
                    }
                }
                {
                    XMLGregorianCalendar lhsCreated;
                    lhsCreated = this.getCreated();
                    XMLGregorianCalendar rhsCreated;
                    rhsCreated = that.getCreated();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "created", lhsCreated), LocatorUtils.property(thatLocator, "created", rhsCreated), lhsCreated, rhsCreated)) {
                        return false;
                    }
                }
                {
                    XMLGregorianCalendar lhsLastUpdated;
                    lhsLastUpdated = this.getLastUpdated();
                    XMLGregorianCalendar rhsLastUpdated;
                    rhsLastUpdated = that.getLastUpdated();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "lastUpdated", lhsLastUpdated), LocatorUtils.property(thatLocator, "lastUpdated", rhsLastUpdated), lhsLastUpdated, rhsLastUpdated)) {
                        return false;
                    }
                }
                {
                    String lhsId;
                    lhsId = this.getId();
                    String rhsId;
                    rhsId = that.getId();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    MetaData.Categories.Category.Concept theConcept;
                    theConcept = this.getConcept();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "concept", theConcept), currentHashCode, theConcept);
                }
                {
                    String theDataDimension;
                    theDataDimension = this.getDataDimension();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataDimension", theDataDimension), currentHashCode, theDataDimension);
                }
                {
                    MetaData.Categories.Category.CategoryOptions theCategoryOptions;
                    theCategoryOptions = this.getCategoryOptions();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "categoryOptions", theCategoryOptions), currentHashCode, theCategoryOptions);
                }
                {
                    String theName;
                    theName = this.getName();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
                }
                {
                    XMLGregorianCalendar theCreated;
                    theCreated = this.getCreated();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "created", theCreated), currentHashCode, theCreated);
                }
                {
                    XMLGregorianCalendar theLastUpdated;
                    theLastUpdated = this.getLastUpdated();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastUpdated", theLastUpdated), currentHashCode, theLastUpdated);
                }
                {
                    String theId;
                    theId = this.getId();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof MetaData.Categories.Category) {
                    final MetaData.Categories.Category copy = ((MetaData.Categories.Category) draftCopy);
                    if (this.concept!= null) {
                        MetaData.Categories.Category.Concept sourceConcept;
                        sourceConcept = this.getConcept();
                        MetaData.Categories.Category.Concept copyConcept = ((MetaData.Categories.Category.Concept) strategy.copy(LocatorUtils.property(locator, "concept", sourceConcept), sourceConcept));
                        copy.setConcept(copyConcept);
                    } else {
                        copy.concept = null;
                    }
                    if (this.dataDimension!= null) {
                        String sourceDataDimension;
                        sourceDataDimension = this.getDataDimension();
                        String copyDataDimension = ((String) strategy.copy(LocatorUtils.property(locator, "dataDimension", sourceDataDimension), sourceDataDimension));
                        copy.setDataDimension(copyDataDimension);
                    } else {
                        copy.dataDimension = null;
                    }
                    if (this.categoryOptions!= null) {
                        MetaData.Categories.Category.CategoryOptions sourceCategoryOptions;
                        sourceCategoryOptions = this.getCategoryOptions();
                        MetaData.Categories.Category.CategoryOptions copyCategoryOptions = ((MetaData.Categories.Category.CategoryOptions) strategy.copy(LocatorUtils.property(locator, "categoryOptions", sourceCategoryOptions), sourceCategoryOptions));
                        copy.setCategoryOptions(copyCategoryOptions);
                    } else {
                        copy.categoryOptions = null;
                    }
                    if (this.name!= null) {
                        String sourceName;
                        sourceName = this.getName();
                        String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                        copy.setName(copyName);
                    } else {
                        copy.name = null;
                    }
                    if (this.created!= null) {
                        XMLGregorianCalendar sourceCreated;
                        sourceCreated = this.getCreated();
                        XMLGregorianCalendar copyCreated = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "created", sourceCreated), sourceCreated));
                        copy.setCreated(copyCreated);
                    } else {
                        copy.created = null;
                    }
                    if (this.lastUpdated!= null) {
                        XMLGregorianCalendar sourceLastUpdated;
                        sourceLastUpdated = this.getLastUpdated();
                        XMLGregorianCalendar copyLastUpdated = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "lastUpdated", sourceLastUpdated), sourceLastUpdated));
                        copy.setLastUpdated(copyLastUpdated);
                    } else {
                        copy.lastUpdated = null;
                    }
                    if (this.id!= null) {
                        String sourceId;
                        sourceId = this.getId();
                        String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                        copy.setId(copyId);
                    } else {
                        copy.id = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new MetaData.Categories.Category();
            }


            /**
             * <p>Java class for anonymous complex type.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.
             * 
             * <pre>
             * &lt;complexType>
             *   &lt;complexContent>
             *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       &lt;sequence>
             *         &lt;element name="categoryOption" maxOccurs="unbounded">
             *           &lt;complexType>
             *             &lt;complexContent>
             *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *                 &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
             *                 &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
             *                 &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
             *                 &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
             *               &lt;/restriction>
             *             &lt;/complexContent>
             *           &lt;/complexType>
             *         &lt;/element>
             *       &lt;/sequence>
             *     &lt;/restriction>
             *   &lt;/complexContent>
             * &lt;/complexType>
             * </pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "categoryOption"
            })
            public static class CategoryOptions
                implements Cloneable, CopyTo, Equals, HashCode, ToString
            {

                @XmlElement(required = true)
                protected List<MetaData.Categories.Category.CategoryOptions.CategoryOption> categoryOption;

                /**
                 * Gets the value of the categoryOption property.
                 * 
                 * <p>
                 * This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the categoryOption property.
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * <pre>
                 *    getCategoryOption().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link MetaData.Categories.Category.CategoryOptions.CategoryOption }
                 * 
                 * 
                 */
                public List<MetaData.Categories.Category.CategoryOptions.CategoryOption> getCategoryOption() {
                    if (categoryOption == null) {
                        categoryOption = new ArrayList<MetaData.Categories.Category.CategoryOptions.CategoryOption>();
                    }
                    return this.categoryOption;
                }

                public String toString() {
                    final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                    final StringBuilder buffer = new StringBuilder();
                    append(null, buffer, strategy);
                    return buffer.toString();
                }

                public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    strategy.appendStart(locator, this, buffer);
                    appendFields(locator, buffer, strategy);
                    strategy.appendEnd(locator, this, buffer);
                    return buffer;
                }

                public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    {
                        List<MetaData.Categories.Category.CategoryOptions.CategoryOption> theCategoryOption;
                        theCategoryOption = (((this.categoryOption!= null)&&(!this.categoryOption.isEmpty()))?this.getCategoryOption():null);
                        strategy.appendField(locator, this, "categoryOption", buffer, theCategoryOption);
                    }
                    return buffer;
                }

                public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                    if (!(object instanceof MetaData.Categories.Category.CategoryOptions)) {
                        return false;
                    }
                    if (this == object) {
                        return true;
                    }
                    final MetaData.Categories.Category.CategoryOptions that = ((MetaData.Categories.Category.CategoryOptions) object);
                    {
                        List<MetaData.Categories.Category.CategoryOptions.CategoryOption> lhsCategoryOption;
                        lhsCategoryOption = (((this.categoryOption!= null)&&(!this.categoryOption.isEmpty()))?this.getCategoryOption():null);
                        List<MetaData.Categories.Category.CategoryOptions.CategoryOption> rhsCategoryOption;
                        rhsCategoryOption = (((that.categoryOption!= null)&&(!that.categoryOption.isEmpty()))?that.getCategoryOption():null);
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "categoryOption", lhsCategoryOption), LocatorUtils.property(thatLocator, "categoryOption", rhsCategoryOption), lhsCategoryOption, rhsCategoryOption)) {
                            return false;
                        }
                    }
                    return true;
                }

                public boolean equals(Object object) {
                    final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                    return equals(null, null, object, strategy);
                }

                public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                    int currentHashCode = 1;
                    {
                        List<MetaData.Categories.Category.CategoryOptions.CategoryOption> theCategoryOption;
                        theCategoryOption = (((this.categoryOption!= null)&&(!this.categoryOption.isEmpty()))?this.getCategoryOption():null);
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "categoryOption", theCategoryOption), currentHashCode, theCategoryOption);
                    }
                    return currentHashCode;
                }

                public int hashCode() {
                    final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                    return this.hashCode(null, strategy);
                }

                public Object clone() {
                    return copyTo(createNewInstance());
                }

                public Object copyTo(Object target) {
                    final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                    return copyTo(null, target, strategy);
                }

                public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                    final Object draftCopy = ((target == null)?createNewInstance():target);
                    if (draftCopy instanceof MetaData.Categories.Category.CategoryOptions) {
                        final MetaData.Categories.Category.CategoryOptions copy = ((MetaData.Categories.Category.CategoryOptions) draftCopy);
                        if ((this.categoryOption!= null)&&(!this.categoryOption.isEmpty())) {
                            List<MetaData.Categories.Category.CategoryOptions.CategoryOption> sourceCategoryOption;
                            sourceCategoryOption = (((this.categoryOption!= null)&&(!this.categoryOption.isEmpty()))?this.getCategoryOption():null);
                            @SuppressWarnings("unchecked")
                            List<MetaData.Categories.Category.CategoryOptions.CategoryOption> copyCategoryOption = ((List<MetaData.Categories.Category.CategoryOptions.CategoryOption> ) strategy.copy(LocatorUtils.property(locator, "categoryOption", sourceCategoryOption), sourceCategoryOption));
                            copy.categoryOption = null;
                            if (copyCategoryOption!= null) {
                                List<MetaData.Categories.Category.CategoryOptions.CategoryOption> uniqueCategoryOptionl = copy.getCategoryOption();
                                uniqueCategoryOptionl.addAll(copyCategoryOption);
                            }
                        } else {
                            copy.categoryOption = null;
                        }
                    }
                    return draftCopy;
                }

                public Object createNewInstance() {
                    return new MetaData.Categories.Category.CategoryOptions();
                }


                /**
                 * <p>Java class for anonymous complex type.
                 * 
                 * <p>The following schema fragment specifies the expected content contained within this class.
                 * 
                 * <pre>
                 * &lt;complexType>
                 *   &lt;complexContent>
                 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                 *       &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
                 *       &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
                 *       &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
                 *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
                 *     &lt;/restriction>
                 *   &lt;/complexContent>
                 * &lt;/complexType>
                 * </pre>
                 * 
                 * 
                 */
                @XmlAccessorType(XmlAccessType.FIELD)
                @XmlType(name = "")
                public static class CategoryOption
                    implements Cloneable, CopyTo, Equals, HashCode, ToString
                {

                    @XmlAttribute(name = "name", required = true)
                    protected String name;
                    @XmlAttribute(name = "created", required = true)
                    protected String created;
                    @XmlAttribute(name = "lastUpdated", required = true)
                    protected String lastUpdated;
                    @XmlAttribute(name = "id", required = true)
                    protected String id;

                    /**
                     * Gets the value of the name property.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getName() {
                        return name;
                    }

                    /**
                     * Sets the value of the name property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     */
                    public void setName(String value) {
                        this.name = value;
                    }

                    /**
                     * Gets the value of the created property.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getCreated() {
                        return created;
                    }

                    /**
                     * Sets the value of the created property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     */
                    public void setCreated(String value) {
                        this.created = value;
                    }

                    /**
                     * Gets the value of the lastUpdated property.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getLastUpdated() {
                        return lastUpdated;
                    }

                    /**
                     * Sets the value of the lastUpdated property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     */
                    public void setLastUpdated(String value) {
                        this.lastUpdated = value;
                    }

                    /**
                     * Gets the value of the id property.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getId() {
                        return id;
                    }

                    /**
                     * Sets the value of the id property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     */
                    public void setId(String value) {
                        this.id = value;
                    }

                    public String toString() {
                        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                        final StringBuilder buffer = new StringBuilder();
                        append(null, buffer, strategy);
                        return buffer.toString();
                    }

                    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                        strategy.appendStart(locator, this, buffer);
                        appendFields(locator, buffer, strategy);
                        strategy.appendEnd(locator, this, buffer);
                        return buffer;
                    }

                    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                        {
                            String theName;
                            theName = this.getName();
                            strategy.appendField(locator, this, "name", buffer, theName);
                        }
                        {
                            String theCreated;
                            theCreated = this.getCreated();
                            strategy.appendField(locator, this, "created", buffer, theCreated);
                        }
                        {
                            String theLastUpdated;
                            theLastUpdated = this.getLastUpdated();
                            strategy.appendField(locator, this, "lastUpdated", buffer, theLastUpdated);
                        }
                        {
                            String theId;
                            theId = this.getId();
                            strategy.appendField(locator, this, "id", buffer, theId);
                        }
                        return buffer;
                    }

                    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                        if (!(object instanceof MetaData.Categories.Category.CategoryOptions.CategoryOption)) {
                            return false;
                        }
                        if (this == object) {
                            return true;
                        }
                        final MetaData.Categories.Category.CategoryOptions.CategoryOption that = ((MetaData.Categories.Category.CategoryOptions.CategoryOption) object);
                        {
                            String lhsName;
                            lhsName = this.getName();
                            String rhsName;
                            rhsName = that.getName();
                            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                                return false;
                            }
                        }
                        {
                            String lhsCreated;
                            lhsCreated = this.getCreated();
                            String rhsCreated;
                            rhsCreated = that.getCreated();
                            if (!strategy.equals(LocatorUtils.property(thisLocator, "created", lhsCreated), LocatorUtils.property(thatLocator, "created", rhsCreated), lhsCreated, rhsCreated)) {
                                return false;
                            }
                        }
                        {
                            String lhsLastUpdated;
                            lhsLastUpdated = this.getLastUpdated();
                            String rhsLastUpdated;
                            rhsLastUpdated = that.getLastUpdated();
                            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastUpdated", lhsLastUpdated), LocatorUtils.property(thatLocator, "lastUpdated", rhsLastUpdated), lhsLastUpdated, rhsLastUpdated)) {
                                return false;
                            }
                        }
                        {
                            String lhsId;
                            lhsId = this.getId();
                            String rhsId;
                            rhsId = that.getId();
                            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                                return false;
                            }
                        }
                        return true;
                    }

                    public boolean equals(Object object) {
                        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                        return equals(null, null, object, strategy);
                    }

                    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                        int currentHashCode = 1;
                        {
                            String theName;
                            theName = this.getName();
                            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
                        }
                        {
                            String theCreated;
                            theCreated = this.getCreated();
                            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "created", theCreated), currentHashCode, theCreated);
                        }
                        {
                            String theLastUpdated;
                            theLastUpdated = this.getLastUpdated();
                            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastUpdated", theLastUpdated), currentHashCode, theLastUpdated);
                        }
                        {
                            String theId;
                            theId = this.getId();
                            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
                        }
                        return currentHashCode;
                    }

                    public int hashCode() {
                        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                        return this.hashCode(null, strategy);
                    }

                    public Object clone() {
                        return copyTo(createNewInstance());
                    }

                    public Object copyTo(Object target) {
                        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                        return copyTo(null, target, strategy);
                    }

                    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                        final Object draftCopy = ((target == null)?createNewInstance():target);
                        if (draftCopy instanceof MetaData.Categories.Category.CategoryOptions.CategoryOption) {
                            final MetaData.Categories.Category.CategoryOptions.CategoryOption copy = ((MetaData.Categories.Category.CategoryOptions.CategoryOption) draftCopy);
                            if (this.name!= null) {
                                String sourceName;
                                sourceName = this.getName();
                                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                                copy.setName(copyName);
                            } else {
                                copy.name = null;
                            }
                            if (this.created!= null) {
                                String sourceCreated;
                                sourceCreated = this.getCreated();
                                String copyCreated = ((String) strategy.copy(LocatorUtils.property(locator, "created", sourceCreated), sourceCreated));
                                copy.setCreated(copyCreated);
                            } else {
                                copy.created = null;
                            }
                            if (this.lastUpdated!= null) {
                                String sourceLastUpdated;
                                sourceLastUpdated = this.getLastUpdated();
                                String copyLastUpdated = ((String) strategy.copy(LocatorUtils.property(locator, "lastUpdated", sourceLastUpdated), sourceLastUpdated));
                                copy.setLastUpdated(copyLastUpdated);
                            } else {
                                copy.lastUpdated = null;
                            }
                            if (this.id!= null) {
                                String sourceId;
                                sourceId = this.getId();
                                String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                                copy.setId(copyId);
                            } else {
                                copy.id = null;
                            }
                        }
                        return draftCopy;
                    }

                    public Object createNewInstance() {
                        return new MetaData.Categories.Category.CategoryOptions.CategoryOption();
                    }

                }

            }


            /**
             * <p>Java class for anonymous complex type.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.
             * 
             * <pre>
             * &lt;complexType>
             *   &lt;complexContent>
             *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
             *       &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
             *       &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
             *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
             *     &lt;/restriction>
             *   &lt;/complexContent>
             * &lt;/complexType>
             * </pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "")
            public static class Concept
                implements Cloneable, CopyTo, Equals, HashCode, ToString
            {

                @XmlAttribute(name = "name", required = true)
                protected String name;
                @XmlAttribute(name = "created", required = true)
                @XmlSchemaType(name = "dateTime")
                protected XMLGregorianCalendar created;
                @XmlAttribute(name = "lastUpdated", required = true)
                @XmlSchemaType(name = "dateTime")
                protected XMLGregorianCalendar lastUpdated;
                @XmlAttribute(name = "id", required = true)
                protected String id;

                /**
                 * Gets the value of the name property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getName() {
                    return name;
                }

                /**
                 * Sets the value of the name property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setName(String value) {
                    this.name = value;
                }

                /**
                 * Gets the value of the created property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link XMLGregorianCalendar }
                 *     
                 */
                public XMLGregorianCalendar getCreated() {
                    return created;
                }

                /**
                 * Sets the value of the created property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link XMLGregorianCalendar }
                 *     
                 */
                public void setCreated(XMLGregorianCalendar value) {
                    this.created = value;
                }

                /**
                 * Gets the value of the lastUpdated property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link XMLGregorianCalendar }
                 *     
                 */
                public XMLGregorianCalendar getLastUpdated() {
                    return lastUpdated;
                }

                /**
                 * Sets the value of the lastUpdated property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link XMLGregorianCalendar }
                 *     
                 */
                public void setLastUpdated(XMLGregorianCalendar value) {
                    this.lastUpdated = value;
                }

                /**
                 * Gets the value of the id property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getId() {
                    return id;
                }

                /**
                 * Sets the value of the id property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setId(String value) {
                    this.id = value;
                }

                public String toString() {
                    final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                    final StringBuilder buffer = new StringBuilder();
                    append(null, buffer, strategy);
                    return buffer.toString();
                }

                public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    strategy.appendStart(locator, this, buffer);
                    appendFields(locator, buffer, strategy);
                    strategy.appendEnd(locator, this, buffer);
                    return buffer;
                }

                public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    {
                        String theName;
                        theName = this.getName();
                        strategy.appendField(locator, this, "name", buffer, theName);
                    }
                    {
                        XMLGregorianCalendar theCreated;
                        theCreated = this.getCreated();
                        strategy.appendField(locator, this, "created", buffer, theCreated);
                    }
                    {
                        XMLGregorianCalendar theLastUpdated;
                        theLastUpdated = this.getLastUpdated();
                        strategy.appendField(locator, this, "lastUpdated", buffer, theLastUpdated);
                    }
                    {
                        String theId;
                        theId = this.getId();
                        strategy.appendField(locator, this, "id", buffer, theId);
                    }
                    return buffer;
                }

                public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                    if (!(object instanceof MetaData.Categories.Category.Concept)) {
                        return false;
                    }
                    if (this == object) {
                        return true;
                    }
                    final MetaData.Categories.Category.Concept that = ((MetaData.Categories.Category.Concept) object);
                    {
                        String lhsName;
                        lhsName = this.getName();
                        String rhsName;
                        rhsName = that.getName();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                            return false;
                        }
                    }
                    {
                        XMLGregorianCalendar lhsCreated;
                        lhsCreated = this.getCreated();
                        XMLGregorianCalendar rhsCreated;
                        rhsCreated = that.getCreated();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "created", lhsCreated), LocatorUtils.property(thatLocator, "created", rhsCreated), lhsCreated, rhsCreated)) {
                            return false;
                        }
                    }
                    {
                        XMLGregorianCalendar lhsLastUpdated;
                        lhsLastUpdated = this.getLastUpdated();
                        XMLGregorianCalendar rhsLastUpdated;
                        rhsLastUpdated = that.getLastUpdated();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "lastUpdated", lhsLastUpdated), LocatorUtils.property(thatLocator, "lastUpdated", rhsLastUpdated), lhsLastUpdated, rhsLastUpdated)) {
                            return false;
                        }
                    }
                    {
                        String lhsId;
                        lhsId = this.getId();
                        String rhsId;
                        rhsId = that.getId();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                            return false;
                        }
                    }
                    return true;
                }

                public boolean equals(Object object) {
                    final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                    return equals(null, null, object, strategy);
                }

                public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                    int currentHashCode = 1;
                    {
                        String theName;
                        theName = this.getName();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
                    }
                    {
                        XMLGregorianCalendar theCreated;
                        theCreated = this.getCreated();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "created", theCreated), currentHashCode, theCreated);
                    }
                    {
                        XMLGregorianCalendar theLastUpdated;
                        theLastUpdated = this.getLastUpdated();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastUpdated", theLastUpdated), currentHashCode, theLastUpdated);
                    }
                    {
                        String theId;
                        theId = this.getId();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
                    }
                    return currentHashCode;
                }

                public int hashCode() {
                    final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                    return this.hashCode(null, strategy);
                }

                public Object clone() {
                    return copyTo(createNewInstance());
                }

                public Object copyTo(Object target) {
                    final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                    return copyTo(null, target, strategy);
                }

                public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                    final Object draftCopy = ((target == null)?createNewInstance():target);
                    if (draftCopy instanceof MetaData.Categories.Category.Concept) {
                        final MetaData.Categories.Category.Concept copy = ((MetaData.Categories.Category.Concept) draftCopy);
                        if (this.name!= null) {
                            String sourceName;
                            sourceName = this.getName();
                            String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                            copy.setName(copyName);
                        } else {
                            copy.name = null;
                        }
                        if (this.created!= null) {
                            XMLGregorianCalendar sourceCreated;
                            sourceCreated = this.getCreated();
                            XMLGregorianCalendar copyCreated = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "created", sourceCreated), sourceCreated));
                            copy.setCreated(copyCreated);
                        } else {
                            copy.created = null;
                        }
                        if (this.lastUpdated!= null) {
                            XMLGregorianCalendar sourceLastUpdated;
                            sourceLastUpdated = this.getLastUpdated();
                            XMLGregorianCalendar copyLastUpdated = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "lastUpdated", sourceLastUpdated), sourceLastUpdated));
                            copy.setLastUpdated(copyLastUpdated);
                        } else {
                            copy.lastUpdated = null;
                        }
                        if (this.id!= null) {
                            String sourceId;
                            sourceId = this.getId();
                            String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                            copy.setId(copyId);
                        } else {
                            copy.id = null;
                        }
                    }
                    return draftCopy;
                }

                public Object createNewInstance() {
                    return new MetaData.Categories.Category.Concept();
                }

            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="categoryOptionCombo" maxOccurs="unbounded" minOccurs="0">
     *           &lt;complexType>
     *             &lt;complexContent>
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 &lt;sequence>
     *                   &lt;element name="categoryCombo">
     *                     &lt;complexType>
     *                       &lt;complexContent>
     *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                           &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                           &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
     *                           &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
     *                           &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                         &lt;/restriction>
     *                       &lt;/complexContent>
     *                     &lt;/complexType>
     *                   &lt;/element>
     *                   &lt;element name="categoryOptions">
     *                     &lt;complexType>
     *                       &lt;complexContent>
     *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                           &lt;sequence>
     *                             &lt;element name="categoryOption" maxOccurs="unbounded" minOccurs="0">
     *                               &lt;complexType>
     *                                 &lt;complexContent>
     *                                   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                                     &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                                     &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
     *                                     &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
     *                                     &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                                   &lt;/restriction>
     *                                 &lt;/complexContent>
     *                               &lt;/complexType>
     *                             &lt;/element>
     *                           &lt;/sequence>
     *                         &lt;/restriction>
     *                       &lt;/complexContent>
     *                     &lt;/complexType>
     *                   &lt;/element>
     *                 &lt;/sequence>
     *                 &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                 &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
     *                 &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
     *                 &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *               &lt;/restriction>
     *             &lt;/complexContent>
     *           &lt;/complexType>
     *         &lt;/element>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "categoryOptionCombo"
    })
    public static class CategoryOptionCombos
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        protected List<MetaData.CategoryOptionCombos.CategoryOptionCombo> categoryOptionCombo;

        /**
         * Gets the value of the categoryOptionCombo property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the categoryOptionCombo property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getCategoryOptionCombo().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link MetaData.CategoryOptionCombos.CategoryOptionCombo }
         * 
         * 
         */
        public List<MetaData.CategoryOptionCombos.CategoryOptionCombo> getCategoryOptionCombo() {
            if (categoryOptionCombo == null) {
                categoryOptionCombo = new ArrayList<MetaData.CategoryOptionCombos.CategoryOptionCombo>();
            }
            return this.categoryOptionCombo;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<MetaData.CategoryOptionCombos.CategoryOptionCombo> theCategoryOptionCombo;
                theCategoryOptionCombo = (((this.categoryOptionCombo!= null)&&(!this.categoryOptionCombo.isEmpty()))?this.getCategoryOptionCombo():null);
                strategy.appendField(locator, this, "categoryOptionCombo", buffer, theCategoryOptionCombo);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof MetaData.CategoryOptionCombos)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final MetaData.CategoryOptionCombos that = ((MetaData.CategoryOptionCombos) object);
            {
                List<MetaData.CategoryOptionCombos.CategoryOptionCombo> lhsCategoryOptionCombo;
                lhsCategoryOptionCombo = (((this.categoryOptionCombo!= null)&&(!this.categoryOptionCombo.isEmpty()))?this.getCategoryOptionCombo():null);
                List<MetaData.CategoryOptionCombos.CategoryOptionCombo> rhsCategoryOptionCombo;
                rhsCategoryOptionCombo = (((that.categoryOptionCombo!= null)&&(!that.categoryOptionCombo.isEmpty()))?that.getCategoryOptionCombo():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "categoryOptionCombo", lhsCategoryOptionCombo), LocatorUtils.property(thatLocator, "categoryOptionCombo", rhsCategoryOptionCombo), lhsCategoryOptionCombo, rhsCategoryOptionCombo)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<MetaData.CategoryOptionCombos.CategoryOptionCombo> theCategoryOptionCombo;
                theCategoryOptionCombo = (((this.categoryOptionCombo!= null)&&(!this.categoryOptionCombo.isEmpty()))?this.getCategoryOptionCombo():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "categoryOptionCombo", theCategoryOptionCombo), currentHashCode, theCategoryOptionCombo);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof MetaData.CategoryOptionCombos) {
                final MetaData.CategoryOptionCombos copy = ((MetaData.CategoryOptionCombos) draftCopy);
                if ((this.categoryOptionCombo!= null)&&(!this.categoryOptionCombo.isEmpty())) {
                    List<MetaData.CategoryOptionCombos.CategoryOptionCombo> sourceCategoryOptionCombo;
                    sourceCategoryOptionCombo = (((this.categoryOptionCombo!= null)&&(!this.categoryOptionCombo.isEmpty()))?this.getCategoryOptionCombo():null);
                    @SuppressWarnings("unchecked")
                    List<MetaData.CategoryOptionCombos.CategoryOptionCombo> copyCategoryOptionCombo = ((List<MetaData.CategoryOptionCombos.CategoryOptionCombo> ) strategy.copy(LocatorUtils.property(locator, "categoryOptionCombo", sourceCategoryOptionCombo), sourceCategoryOptionCombo));
                    copy.categoryOptionCombo = null;
                    if (copyCategoryOptionCombo!= null) {
                        List<MetaData.CategoryOptionCombos.CategoryOptionCombo> uniqueCategoryOptionCombol = copy.getCategoryOptionCombo();
                        uniqueCategoryOptionCombol.addAll(copyCategoryOptionCombo);
                    }
                } else {
                    copy.categoryOptionCombo = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new MetaData.CategoryOptionCombos();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;sequence>
         *         &lt;element name="categoryCombo">
         *           &lt;complexType>
         *             &lt;complexContent>
         *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                 &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *                 &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
         *                 &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
         *                 &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *               &lt;/restriction>
         *             &lt;/complexContent>
         *           &lt;/complexType>
         *         &lt;/element>
         *         &lt;element name="categoryOptions">
         *           &lt;complexType>
         *             &lt;complexContent>
         *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                 &lt;sequence>
         *                   &lt;element name="categoryOption" maxOccurs="unbounded" minOccurs="0">
         *                     &lt;complexType>
         *                       &lt;complexContent>
         *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                           &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *                           &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
         *                           &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
         *                           &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *                         &lt;/restriction>
         *                       &lt;/complexContent>
         *                     &lt;/complexType>
         *                   &lt;/element>
         *                 &lt;/sequence>
         *               &lt;/restriction>
         *             &lt;/complexContent>
         *           &lt;/complexType>
         *         &lt;/element>
         *       &lt;/sequence>
         *       &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *       &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
         *       &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
         *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "categoryCombo",
            "categoryOptions"
        })
        public static class CategoryOptionCombo
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlElement(required = true)
            protected MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo categoryCombo;
            @XmlElement(required = true)
            protected MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions categoryOptions;
            @XmlAttribute(name = "name", required = true)
            protected String name;
            @XmlAttribute(name = "created", required = true)
            @XmlSchemaType(name = "dateTime")
            protected XMLGregorianCalendar created;
            @XmlAttribute(name = "lastUpdated", required = true)
            @XmlSchemaType(name = "dateTime")
            protected XMLGregorianCalendar lastUpdated;
            @XmlAttribute(name = "id", required = true)
            protected String id;

            /**
             * Gets the value of the categoryCombo property.
             * 
             * @return
             *     possible object is
             *     {@link MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo }
             *     
             */
            public MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo getCategoryCombo() {
                return categoryCombo;
            }

            /**
             * Sets the value of the categoryCombo property.
             * 
             * @param value
             *     allowed object is
             *     {@link MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo }
             *     
             */
            public void setCategoryCombo(MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo value) {
                this.categoryCombo = value;
            }

            /**
             * Gets the value of the categoryOptions property.
             * 
             * @return
             *     possible object is
             *     {@link MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions }
             *     
             */
            public MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions getCategoryOptions() {
                return categoryOptions;
            }

            /**
             * Sets the value of the categoryOptions property.
             * 
             * @param value
             *     allowed object is
             *     {@link MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions }
             *     
             */
            public void setCategoryOptions(MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions value) {
                this.categoryOptions = value;
            }

            /**
             * Gets the value of the name property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getName() {
                return name;
            }

            /**
             * Sets the value of the name property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setName(String value) {
                this.name = value;
            }

            /**
             * Gets the value of the created property.
             * 
             * @return
             *     possible object is
             *     {@link XMLGregorianCalendar }
             *     
             */
            public XMLGregorianCalendar getCreated() {
                return created;
            }

            /**
             * Sets the value of the created property.
             * 
             * @param value
             *     allowed object is
             *     {@link XMLGregorianCalendar }
             *     
             */
            public void setCreated(XMLGregorianCalendar value) {
                this.created = value;
            }

            /**
             * Gets the value of the lastUpdated property.
             * 
             * @return
             *     possible object is
             *     {@link XMLGregorianCalendar }
             *     
             */
            public XMLGregorianCalendar getLastUpdated() {
                return lastUpdated;
            }

            /**
             * Sets the value of the lastUpdated property.
             * 
             * @param value
             *     allowed object is
             *     {@link XMLGregorianCalendar }
             *     
             */
            public void setLastUpdated(XMLGregorianCalendar value) {
                this.lastUpdated = value;
            }

            /**
             * Gets the value of the id property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getId() {
                return id;
            }

            /**
             * Sets the value of the id property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setId(String value) {
                this.id = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo theCategoryCombo;
                    theCategoryCombo = this.getCategoryCombo();
                    strategy.appendField(locator, this, "categoryCombo", buffer, theCategoryCombo);
                }
                {
                    MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions theCategoryOptions;
                    theCategoryOptions = this.getCategoryOptions();
                    strategy.appendField(locator, this, "categoryOptions", buffer, theCategoryOptions);
                }
                {
                    String theName;
                    theName = this.getName();
                    strategy.appendField(locator, this, "name", buffer, theName);
                }
                {
                    XMLGregorianCalendar theCreated;
                    theCreated = this.getCreated();
                    strategy.appendField(locator, this, "created", buffer, theCreated);
                }
                {
                    XMLGregorianCalendar theLastUpdated;
                    theLastUpdated = this.getLastUpdated();
                    strategy.appendField(locator, this, "lastUpdated", buffer, theLastUpdated);
                }
                {
                    String theId;
                    theId = this.getId();
                    strategy.appendField(locator, this, "id", buffer, theId);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof MetaData.CategoryOptionCombos.CategoryOptionCombo)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final MetaData.CategoryOptionCombos.CategoryOptionCombo that = ((MetaData.CategoryOptionCombos.CategoryOptionCombo) object);
                {
                    MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo lhsCategoryCombo;
                    lhsCategoryCombo = this.getCategoryCombo();
                    MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo rhsCategoryCombo;
                    rhsCategoryCombo = that.getCategoryCombo();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "categoryCombo", lhsCategoryCombo), LocatorUtils.property(thatLocator, "categoryCombo", rhsCategoryCombo), lhsCategoryCombo, rhsCategoryCombo)) {
                        return false;
                    }
                }
                {
                    MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions lhsCategoryOptions;
                    lhsCategoryOptions = this.getCategoryOptions();
                    MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions rhsCategoryOptions;
                    rhsCategoryOptions = that.getCategoryOptions();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "categoryOptions", lhsCategoryOptions), LocatorUtils.property(thatLocator, "categoryOptions", rhsCategoryOptions), lhsCategoryOptions, rhsCategoryOptions)) {
                        return false;
                    }
                }
                {
                    String lhsName;
                    lhsName = this.getName();
                    String rhsName;
                    rhsName = that.getName();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                        return false;
                    }
                }
                {
                    XMLGregorianCalendar lhsCreated;
                    lhsCreated = this.getCreated();
                    XMLGregorianCalendar rhsCreated;
                    rhsCreated = that.getCreated();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "created", lhsCreated), LocatorUtils.property(thatLocator, "created", rhsCreated), lhsCreated, rhsCreated)) {
                        return false;
                    }
                }
                {
                    XMLGregorianCalendar lhsLastUpdated;
                    lhsLastUpdated = this.getLastUpdated();
                    XMLGregorianCalendar rhsLastUpdated;
                    rhsLastUpdated = that.getLastUpdated();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "lastUpdated", lhsLastUpdated), LocatorUtils.property(thatLocator, "lastUpdated", rhsLastUpdated), lhsLastUpdated, rhsLastUpdated)) {
                        return false;
                    }
                }
                {
                    String lhsId;
                    lhsId = this.getId();
                    String rhsId;
                    rhsId = that.getId();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo theCategoryCombo;
                    theCategoryCombo = this.getCategoryCombo();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "categoryCombo", theCategoryCombo), currentHashCode, theCategoryCombo);
                }
                {
                    MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions theCategoryOptions;
                    theCategoryOptions = this.getCategoryOptions();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "categoryOptions", theCategoryOptions), currentHashCode, theCategoryOptions);
                }
                {
                    String theName;
                    theName = this.getName();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
                }
                {
                    XMLGregorianCalendar theCreated;
                    theCreated = this.getCreated();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "created", theCreated), currentHashCode, theCreated);
                }
                {
                    XMLGregorianCalendar theLastUpdated;
                    theLastUpdated = this.getLastUpdated();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastUpdated", theLastUpdated), currentHashCode, theLastUpdated);
                }
                {
                    String theId;
                    theId = this.getId();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof MetaData.CategoryOptionCombos.CategoryOptionCombo) {
                    final MetaData.CategoryOptionCombos.CategoryOptionCombo copy = ((MetaData.CategoryOptionCombos.CategoryOptionCombo) draftCopy);
                    if (this.categoryCombo!= null) {
                        MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo sourceCategoryCombo;
                        sourceCategoryCombo = this.getCategoryCombo();
                        MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo copyCategoryCombo = ((MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo) strategy.copy(LocatorUtils.property(locator, "categoryCombo", sourceCategoryCombo), sourceCategoryCombo));
                        copy.setCategoryCombo(copyCategoryCombo);
                    } else {
                        copy.categoryCombo = null;
                    }
                    if (this.categoryOptions!= null) {
                        MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions sourceCategoryOptions;
                        sourceCategoryOptions = this.getCategoryOptions();
                        MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions copyCategoryOptions = ((MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions) strategy.copy(LocatorUtils.property(locator, "categoryOptions", sourceCategoryOptions), sourceCategoryOptions));
                        copy.setCategoryOptions(copyCategoryOptions);
                    } else {
                        copy.categoryOptions = null;
                    }
                    if (this.name!= null) {
                        String sourceName;
                        sourceName = this.getName();
                        String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                        copy.setName(copyName);
                    } else {
                        copy.name = null;
                    }
                    if (this.created!= null) {
                        XMLGregorianCalendar sourceCreated;
                        sourceCreated = this.getCreated();
                        XMLGregorianCalendar copyCreated = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "created", sourceCreated), sourceCreated));
                        copy.setCreated(copyCreated);
                    } else {
                        copy.created = null;
                    }
                    if (this.lastUpdated!= null) {
                        XMLGregorianCalendar sourceLastUpdated;
                        sourceLastUpdated = this.getLastUpdated();
                        XMLGregorianCalendar copyLastUpdated = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "lastUpdated", sourceLastUpdated), sourceLastUpdated));
                        copy.setLastUpdated(copyLastUpdated);
                    } else {
                        copy.lastUpdated = null;
                    }
                    if (this.id!= null) {
                        String sourceId;
                        sourceId = this.getId();
                        String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                        copy.setId(copyId);
                    } else {
                        copy.id = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new MetaData.CategoryOptionCombos.CategoryOptionCombo();
            }


            /**
             * <p>Java class for anonymous complex type.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.
             * 
             * <pre>
             * &lt;complexType>
             *   &lt;complexContent>
             *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
             *       &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
             *       &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
             *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
             *     &lt;/restriction>
             *   &lt;/complexContent>
             * &lt;/complexType>
             * </pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "")
            public static class CategoryCombo
                implements Cloneable, CopyTo, Equals, HashCode, ToString
            {

                @XmlAttribute(name = "name", required = true)
                protected String name;
                @XmlAttribute(name = "created", required = true)
                @XmlSchemaType(name = "dateTime")
                protected XMLGregorianCalendar created;
                @XmlAttribute(name = "lastUpdated", required = true)
                @XmlSchemaType(name = "dateTime")
                protected XMLGregorianCalendar lastUpdated;
                @XmlAttribute(name = "id", required = true)
                protected String id;

                /**
                 * Gets the value of the name property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getName() {
                    return name;
                }

                /**
                 * Sets the value of the name property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setName(String value) {
                    this.name = value;
                }

                /**
                 * Gets the value of the created property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link XMLGregorianCalendar }
                 *     
                 */
                public XMLGregorianCalendar getCreated() {
                    return created;
                }

                /**
                 * Sets the value of the created property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link XMLGregorianCalendar }
                 *     
                 */
                public void setCreated(XMLGregorianCalendar value) {
                    this.created = value;
                }

                /**
                 * Gets the value of the lastUpdated property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link XMLGregorianCalendar }
                 *     
                 */
                public XMLGregorianCalendar getLastUpdated() {
                    return lastUpdated;
                }

                /**
                 * Sets the value of the lastUpdated property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link XMLGregorianCalendar }
                 *     
                 */
                public void setLastUpdated(XMLGregorianCalendar value) {
                    this.lastUpdated = value;
                }

                /**
                 * Gets the value of the id property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getId() {
                    return id;
                }

                /**
                 * Sets the value of the id property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setId(String value) {
                    this.id = value;
                }

                public String toString() {
                    final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                    final StringBuilder buffer = new StringBuilder();
                    append(null, buffer, strategy);
                    return buffer.toString();
                }

                public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    strategy.appendStart(locator, this, buffer);
                    appendFields(locator, buffer, strategy);
                    strategy.appendEnd(locator, this, buffer);
                    return buffer;
                }

                public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    {
                        String theName;
                        theName = this.getName();
                        strategy.appendField(locator, this, "name", buffer, theName);
                    }
                    {
                        XMLGregorianCalendar theCreated;
                        theCreated = this.getCreated();
                        strategy.appendField(locator, this, "created", buffer, theCreated);
                    }
                    {
                        XMLGregorianCalendar theLastUpdated;
                        theLastUpdated = this.getLastUpdated();
                        strategy.appendField(locator, this, "lastUpdated", buffer, theLastUpdated);
                    }
                    {
                        String theId;
                        theId = this.getId();
                        strategy.appendField(locator, this, "id", buffer, theId);
                    }
                    return buffer;
                }

                public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                    if (!(object instanceof MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo)) {
                        return false;
                    }
                    if (this == object) {
                        return true;
                    }
                    final MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo that = ((MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo) object);
                    {
                        String lhsName;
                        lhsName = this.getName();
                        String rhsName;
                        rhsName = that.getName();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                            return false;
                        }
                    }
                    {
                        XMLGregorianCalendar lhsCreated;
                        lhsCreated = this.getCreated();
                        XMLGregorianCalendar rhsCreated;
                        rhsCreated = that.getCreated();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "created", lhsCreated), LocatorUtils.property(thatLocator, "created", rhsCreated), lhsCreated, rhsCreated)) {
                            return false;
                        }
                    }
                    {
                        XMLGregorianCalendar lhsLastUpdated;
                        lhsLastUpdated = this.getLastUpdated();
                        XMLGregorianCalendar rhsLastUpdated;
                        rhsLastUpdated = that.getLastUpdated();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "lastUpdated", lhsLastUpdated), LocatorUtils.property(thatLocator, "lastUpdated", rhsLastUpdated), lhsLastUpdated, rhsLastUpdated)) {
                            return false;
                        }
                    }
                    {
                        String lhsId;
                        lhsId = this.getId();
                        String rhsId;
                        rhsId = that.getId();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                            return false;
                        }
                    }
                    return true;
                }

                public boolean equals(Object object) {
                    final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                    return equals(null, null, object, strategy);
                }

                public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                    int currentHashCode = 1;
                    {
                        String theName;
                        theName = this.getName();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
                    }
                    {
                        XMLGregorianCalendar theCreated;
                        theCreated = this.getCreated();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "created", theCreated), currentHashCode, theCreated);
                    }
                    {
                        XMLGregorianCalendar theLastUpdated;
                        theLastUpdated = this.getLastUpdated();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastUpdated", theLastUpdated), currentHashCode, theLastUpdated);
                    }
                    {
                        String theId;
                        theId = this.getId();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
                    }
                    return currentHashCode;
                }

                public int hashCode() {
                    final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                    return this.hashCode(null, strategy);
                }

                public Object clone() {
                    return copyTo(createNewInstance());
                }

                public Object copyTo(Object target) {
                    final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                    return copyTo(null, target, strategy);
                }

                public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                    final Object draftCopy = ((target == null)?createNewInstance():target);
                    if (draftCopy instanceof MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo) {
                        final MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo copy = ((MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo) draftCopy);
                        if (this.name!= null) {
                            String sourceName;
                            sourceName = this.getName();
                            String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                            copy.setName(copyName);
                        } else {
                            copy.name = null;
                        }
                        if (this.created!= null) {
                            XMLGregorianCalendar sourceCreated;
                            sourceCreated = this.getCreated();
                            XMLGregorianCalendar copyCreated = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "created", sourceCreated), sourceCreated));
                            copy.setCreated(copyCreated);
                        } else {
                            copy.created = null;
                        }
                        if (this.lastUpdated!= null) {
                            XMLGregorianCalendar sourceLastUpdated;
                            sourceLastUpdated = this.getLastUpdated();
                            XMLGregorianCalendar copyLastUpdated = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "lastUpdated", sourceLastUpdated), sourceLastUpdated));
                            copy.setLastUpdated(copyLastUpdated);
                        } else {
                            copy.lastUpdated = null;
                        }
                        if (this.id!= null) {
                            String sourceId;
                            sourceId = this.getId();
                            String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                            copy.setId(copyId);
                        } else {
                            copy.id = null;
                        }
                    }
                    return draftCopy;
                }

                public Object createNewInstance() {
                    return new MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryCombo();
                }

            }


            /**
             * <p>Java class for anonymous complex type.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.
             * 
             * <pre>
             * &lt;complexType>
             *   &lt;complexContent>
             *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       &lt;sequence>
             *         &lt;element name="categoryOption" maxOccurs="unbounded" minOccurs="0">
             *           &lt;complexType>
             *             &lt;complexContent>
             *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *                 &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
             *                 &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
             *                 &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
             *                 &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
             *               &lt;/restriction>
             *             &lt;/complexContent>
             *           &lt;/complexType>
             *         &lt;/element>
             *       &lt;/sequence>
             *     &lt;/restriction>
             *   &lt;/complexContent>
             * &lt;/complexType>
             * </pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "categoryOption"
            })
            public static class CategoryOptions
                implements Cloneable, CopyTo, Equals, HashCode, ToString
            {

                protected List<MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption> categoryOption;

                /**
                 * Gets the value of the categoryOption property.
                 * 
                 * <p>
                 * This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the categoryOption property.
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * <pre>
                 *    getCategoryOption().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption }
                 * 
                 * 
                 */
                public List<MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption> getCategoryOption() {
                    if (categoryOption == null) {
                        categoryOption = new ArrayList<MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption>();
                    }
                    return this.categoryOption;
                }

                public String toString() {
                    final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                    final StringBuilder buffer = new StringBuilder();
                    append(null, buffer, strategy);
                    return buffer.toString();
                }

                public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    strategy.appendStart(locator, this, buffer);
                    appendFields(locator, buffer, strategy);
                    strategy.appendEnd(locator, this, buffer);
                    return buffer;
                }

                public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    {
                        List<MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption> theCategoryOption;
                        theCategoryOption = (((this.categoryOption!= null)&&(!this.categoryOption.isEmpty()))?this.getCategoryOption():null);
                        strategy.appendField(locator, this, "categoryOption", buffer, theCategoryOption);
                    }
                    return buffer;
                }

                public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                    if (!(object instanceof MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions)) {
                        return false;
                    }
                    if (this == object) {
                        return true;
                    }
                    final MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions that = ((MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions) object);
                    {
                        List<MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption> lhsCategoryOption;
                        lhsCategoryOption = (((this.categoryOption!= null)&&(!this.categoryOption.isEmpty()))?this.getCategoryOption():null);
                        List<MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption> rhsCategoryOption;
                        rhsCategoryOption = (((that.categoryOption!= null)&&(!that.categoryOption.isEmpty()))?that.getCategoryOption():null);
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "categoryOption", lhsCategoryOption), LocatorUtils.property(thatLocator, "categoryOption", rhsCategoryOption), lhsCategoryOption, rhsCategoryOption)) {
                            return false;
                        }
                    }
                    return true;
                }

                public boolean equals(Object object) {
                    final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                    return equals(null, null, object, strategy);
                }

                public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                    int currentHashCode = 1;
                    {
                        List<MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption> theCategoryOption;
                        theCategoryOption = (((this.categoryOption!= null)&&(!this.categoryOption.isEmpty()))?this.getCategoryOption():null);
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "categoryOption", theCategoryOption), currentHashCode, theCategoryOption);
                    }
                    return currentHashCode;
                }

                public int hashCode() {
                    final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                    return this.hashCode(null, strategy);
                }

                public Object clone() {
                    return copyTo(createNewInstance());
                }

                public Object copyTo(Object target) {
                    final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                    return copyTo(null, target, strategy);
                }

                public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                    final Object draftCopy = ((target == null)?createNewInstance():target);
                    if (draftCopy instanceof MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions) {
                        final MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions copy = ((MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions) draftCopy);
                        if ((this.categoryOption!= null)&&(!this.categoryOption.isEmpty())) {
                            List<MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption> sourceCategoryOption;
                            sourceCategoryOption = (((this.categoryOption!= null)&&(!this.categoryOption.isEmpty()))?this.getCategoryOption():null);
                            @SuppressWarnings("unchecked")
                            List<MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption> copyCategoryOption = ((List<MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption> ) strategy.copy(LocatorUtils.property(locator, "categoryOption", sourceCategoryOption), sourceCategoryOption));
                            copy.categoryOption = null;
                            if (copyCategoryOption!= null) {
                                List<MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption> uniqueCategoryOptionl = copy.getCategoryOption();
                                uniqueCategoryOptionl.addAll(copyCategoryOption);
                            }
                        } else {
                            copy.categoryOption = null;
                        }
                    }
                    return draftCopy;
                }

                public Object createNewInstance() {
                    return new MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions();
                }


                /**
                 * <p>Java class for anonymous complex type.
                 * 
                 * <p>The following schema fragment specifies the expected content contained within this class.
                 * 
                 * <pre>
                 * &lt;complexType>
                 *   &lt;complexContent>
                 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                 *       &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
                 *       &lt;attribute name="created" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
                 *       &lt;attribute name="lastUpdated" use="required" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
                 *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
                 *     &lt;/restriction>
                 *   &lt;/complexContent>
                 * &lt;/complexType>
                 * </pre>
                 * 
                 * 
                 */
                @XmlAccessorType(XmlAccessType.FIELD)
                @XmlType(name = "")
                public static class CategoryOption
                    implements Cloneable, CopyTo, Equals, HashCode, ToString
                {

                    @XmlAttribute(name = "name", required = true)
                    protected String name;
                    @XmlAttribute(name = "created", required = true)
                    @XmlSchemaType(name = "dateTime")
                    protected XMLGregorianCalendar created;
                    @XmlAttribute(name = "lastUpdated", required = true)
                    @XmlSchemaType(name = "dateTime")
                    protected XMLGregorianCalendar lastUpdated;
                    @XmlAttribute(name = "id", required = true)
                    protected String id;

                    /**
                     * Gets the value of the name property.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getName() {
                        return name;
                    }

                    /**
                     * Sets the value of the name property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     */
                    public void setName(String value) {
                        this.name = value;
                    }

                    /**
                     * Gets the value of the created property.
                     * 
                     * @return
                     *     possible object is
                     *     {@link XMLGregorianCalendar }
                     *     
                     */
                    public XMLGregorianCalendar getCreated() {
                        return created;
                    }

                    /**
                     * Sets the value of the created property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link XMLGregorianCalendar }
                     *     
                     */
                    public void setCreated(XMLGregorianCalendar value) {
                        this.created = value;
                    }

                    /**
                     * Gets the value of the lastUpdated property.
                     * 
                     * @return
                     *     possible object is
                     *     {@link XMLGregorianCalendar }
                     *     
                     */
                    public XMLGregorianCalendar getLastUpdated() {
                        return lastUpdated;
                    }

                    /**
                     * Sets the value of the lastUpdated property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link XMLGregorianCalendar }
                     *     
                     */
                    public void setLastUpdated(XMLGregorianCalendar value) {
                        this.lastUpdated = value;
                    }

                    /**
                     * Gets the value of the id property.
                     * 
                     * @return
                     *     possible object is
                     *     {@link String }
                     *     
                     */
                    public String getId() {
                        return id;
                    }

                    /**
                     * Sets the value of the id property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link String }
                     *     
                     */
                    public void setId(String value) {
                        this.id = value;
                    }

                    public String toString() {
                        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                        final StringBuilder buffer = new StringBuilder();
                        append(null, buffer, strategy);
                        return buffer.toString();
                    }

                    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                        strategy.appendStart(locator, this, buffer);
                        appendFields(locator, buffer, strategy);
                        strategy.appendEnd(locator, this, buffer);
                        return buffer;
                    }

                    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                        {
                            String theName;
                            theName = this.getName();
                            strategy.appendField(locator, this, "name", buffer, theName);
                        }
                        {
                            XMLGregorianCalendar theCreated;
                            theCreated = this.getCreated();
                            strategy.appendField(locator, this, "created", buffer, theCreated);
                        }
                        {
                            XMLGregorianCalendar theLastUpdated;
                            theLastUpdated = this.getLastUpdated();
                            strategy.appendField(locator, this, "lastUpdated", buffer, theLastUpdated);
                        }
                        {
                            String theId;
                            theId = this.getId();
                            strategy.appendField(locator, this, "id", buffer, theId);
                        }
                        return buffer;
                    }

                    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                        if (!(object instanceof MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption)) {
                            return false;
                        }
                        if (this == object) {
                            return true;
                        }
                        final MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption that = ((MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption) object);
                        {
                            String lhsName;
                            lhsName = this.getName();
                            String rhsName;
                            rhsName = that.getName();
                            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                                return false;
                            }
                        }
                        {
                            XMLGregorianCalendar lhsCreated;
                            lhsCreated = this.getCreated();
                            XMLGregorianCalendar rhsCreated;
                            rhsCreated = that.getCreated();
                            if (!strategy.equals(LocatorUtils.property(thisLocator, "created", lhsCreated), LocatorUtils.property(thatLocator, "created", rhsCreated), lhsCreated, rhsCreated)) {
                                return false;
                            }
                        }
                        {
                            XMLGregorianCalendar lhsLastUpdated;
                            lhsLastUpdated = this.getLastUpdated();
                            XMLGregorianCalendar rhsLastUpdated;
                            rhsLastUpdated = that.getLastUpdated();
                            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastUpdated", lhsLastUpdated), LocatorUtils.property(thatLocator, "lastUpdated", rhsLastUpdated), lhsLastUpdated, rhsLastUpdated)) {
                                return false;
                            }
                        }
                        {
                            String lhsId;
                            lhsId = this.getId();
                            String rhsId;
                            rhsId = that.getId();
                            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                                return false;
                            }
                        }
                        return true;
                    }

                    public boolean equals(Object object) {
                        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                        return equals(null, null, object, strategy);
                    }

                    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                        int currentHashCode = 1;
                        {
                            String theName;
                            theName = this.getName();
                            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
                        }
                        {
                            XMLGregorianCalendar theCreated;
                            theCreated = this.getCreated();
                            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "created", theCreated), currentHashCode, theCreated);
                        }
                        {
                            XMLGregorianCalendar theLastUpdated;
                            theLastUpdated = this.getLastUpdated();
                            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastUpdated", theLastUpdated), currentHashCode, theLastUpdated);
                        }
                        {
                            String theId;
                            theId = this.getId();
                            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
                        }
                        return currentHashCode;
                    }

                    public int hashCode() {
                        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                        return this.hashCode(null, strategy);
                    }

                    public Object clone() {
                        return copyTo(createNewInstance());
                    }

                    public Object copyTo(Object target) {
                        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                        return copyTo(null, target, strategy);
                    }

                    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                        final Object draftCopy = ((target == null)?createNewInstance():target);
                        if (draftCopy instanceof MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption) {
                            final MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption copy = ((MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption) draftCopy);
                            if (this.name!= null) {
                                String sourceName;
                                sourceName = this.getName();
                                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                                copy.setName(copyName);
                            } else {
                                copy.name = null;
                            }
                            if (this.created!= null) {
                                XMLGregorianCalendar sourceCreated;
                                sourceCreated = this.getCreated();
                                XMLGregorianCalendar copyCreated = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "created", sourceCreated), sourceCreated));
                                copy.setCreated(copyCreated);
                            } else {
                                copy.created = null;
                            }
                            if (this.lastUpdated!= null) {
                                XMLGregorianCalendar sourceLastUpdated;
                                sourceLastUpdated = this.getLastUpdated();
                                XMLGregorianCalendar copyLastUpdated = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "lastUpdated", sourceLastUpdated), sourceLastUpdated));
                                copy.setLastUpdated(copyLastUpdated);
                            } else {
                                copy.lastUpdated = null;
                            }
                            if (this.id!= null) {
                                String sourceId;
                                sourceId = this.getId();
                                String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                                copy.setId(copyId);
                            } else {
                                copy.id = null;
                            }
                        }
                        return draftCopy;
                    }

                    public Object createNewInstance() {
                        return new MetaData.CategoryOptionCombos.CategoryOptionCombo.CategoryOptions.CategoryOption();
                    }

                }

            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="organisationUnit" maxOccurs="unbounded" minOccurs="0">
     *           &lt;complexType>
     *             &lt;complexContent>
     *               &lt;extension base="{}OrgUnitType">
     *                 &lt;sequence>
     *                   &lt;element name="parent" type="{}OrgUnitType" minOccurs="0"/>
     *                   &lt;element name="openingDate" type="{http://www.w3.org/2001/XMLSchema}date" minOccurs="0"/>
     *                   &lt;element name="active" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
     *                 &lt;/sequence>
     *               &lt;/extension>
     *             &lt;/complexContent>
     *           &lt;/complexType>
     *         &lt;/element>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "organisationUnit"
    })
    public static class OrganisationUnits
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        protected List<MetaData.OrganisationUnits.OrganisationUnit> organisationUnit;

        /**
         * Gets the value of the organisationUnit property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the organisationUnit property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getOrganisationUnit().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link MetaData.OrganisationUnits.OrganisationUnit }
         * 
         * 
         */
        public List<MetaData.OrganisationUnits.OrganisationUnit> getOrganisationUnit() {
            if (organisationUnit == null) {
                organisationUnit = new ArrayList<MetaData.OrganisationUnits.OrganisationUnit>();
            }
            return this.organisationUnit;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<MetaData.OrganisationUnits.OrganisationUnit> theOrganisationUnit;
                theOrganisationUnit = (((this.organisationUnit!= null)&&(!this.organisationUnit.isEmpty()))?this.getOrganisationUnit():null);
                strategy.appendField(locator, this, "organisationUnit", buffer, theOrganisationUnit);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof MetaData.OrganisationUnits)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final MetaData.OrganisationUnits that = ((MetaData.OrganisationUnits) object);
            {
                List<MetaData.OrganisationUnits.OrganisationUnit> lhsOrganisationUnit;
                lhsOrganisationUnit = (((this.organisationUnit!= null)&&(!this.organisationUnit.isEmpty()))?this.getOrganisationUnit():null);
                List<MetaData.OrganisationUnits.OrganisationUnit> rhsOrganisationUnit;
                rhsOrganisationUnit = (((that.organisationUnit!= null)&&(!that.organisationUnit.isEmpty()))?that.getOrganisationUnit():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "organisationUnit", lhsOrganisationUnit), LocatorUtils.property(thatLocator, "organisationUnit", rhsOrganisationUnit), lhsOrganisationUnit, rhsOrganisationUnit)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<MetaData.OrganisationUnits.OrganisationUnit> theOrganisationUnit;
                theOrganisationUnit = (((this.organisationUnit!= null)&&(!this.organisationUnit.isEmpty()))?this.getOrganisationUnit():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "organisationUnit", theOrganisationUnit), currentHashCode, theOrganisationUnit);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof MetaData.OrganisationUnits) {
                final MetaData.OrganisationUnits copy = ((MetaData.OrganisationUnits) draftCopy);
                if ((this.organisationUnit!= null)&&(!this.organisationUnit.isEmpty())) {
                    List<MetaData.OrganisationUnits.OrganisationUnit> sourceOrganisationUnit;
                    sourceOrganisationUnit = (((this.organisationUnit!= null)&&(!this.organisationUnit.isEmpty()))?this.getOrganisationUnit():null);
                    @SuppressWarnings("unchecked")
                    List<MetaData.OrganisationUnits.OrganisationUnit> copyOrganisationUnit = ((List<MetaData.OrganisationUnits.OrganisationUnit> ) strategy.copy(LocatorUtils.property(locator, "organisationUnit", sourceOrganisationUnit), sourceOrganisationUnit));
                    copy.organisationUnit = null;
                    if (copyOrganisationUnit!= null) {
                        List<MetaData.OrganisationUnits.OrganisationUnit> uniqueOrganisationUnitl = copy.getOrganisationUnit();
                        uniqueOrganisationUnitl.addAll(copyOrganisationUnit);
                    }
                } else {
                    copy.organisationUnit = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new MetaData.OrganisationUnits();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;extension base="{}OrgUnitType">
         *       &lt;sequence>
         *         &lt;element name="parent" type="{}OrgUnitType" minOccurs="0"/>
         *         &lt;element name="openingDate" type="{http://www.w3.org/2001/XMLSchema}date" minOccurs="0"/>
         *         &lt;element name="active" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
         *       &lt;/sequence>
         *     &lt;/extension>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "parent",
            "openingDate",
            "active"
        })
        public static class OrganisationUnit
            extends OrgUnitType
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            protected OrgUnitType parent;
            @XmlSchemaType(name = "date")
            protected XMLGregorianCalendar openingDate;
            protected Boolean active;

            /**
             * Gets the value of the parent property.
             * 
             * @return
             *     possible object is
             *     {@link OrgUnitType }
             *     
             */
            public OrgUnitType getParent() {
                return parent;
            }

            /**
             * Sets the value of the parent property.
             * 
             * @param value
             *     allowed object is
             *     {@link OrgUnitType }
             *     
             */
            public void setParent(OrgUnitType value) {
                this.parent = value;
            }

            /**
             * Gets the value of the openingDate property.
             * 
             * @return
             *     possible object is
             *     {@link XMLGregorianCalendar }
             *     
             */
            public XMLGregorianCalendar getOpeningDate() {
                return openingDate;
            }

            /**
             * Sets the value of the openingDate property.
             * 
             * @param value
             *     allowed object is
             *     {@link XMLGregorianCalendar }
             *     
             */
            public void setOpeningDate(XMLGregorianCalendar value) {
                this.openingDate = value;
            }

            /**
             * Gets the value of the active property.
             * 
             * @return
             *     possible object is
             *     {@link Boolean }
             *     
             */
            public Boolean isActive() {
                return active;
            }

            /**
             * Sets the value of the active property.
             * 
             * @param value
             *     allowed object is
             *     {@link Boolean }
             *     
             */
            public void setActive(Boolean value) {
                this.active = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                super.appendFields(locator, buffer, strategy);
                {
                    OrgUnitType theParent;
                    theParent = this.getParent();
                    strategy.appendField(locator, this, "parent", buffer, theParent);
                }
                {
                    XMLGregorianCalendar theOpeningDate;
                    theOpeningDate = this.getOpeningDate();
                    strategy.appendField(locator, this, "openingDate", buffer, theOpeningDate);
                }
                {
                    Boolean theActive;
                    theActive = this.isActive();
                    strategy.appendField(locator, this, "active", buffer, theActive);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof MetaData.OrganisationUnits.OrganisationUnit)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                    return false;
                }
                final MetaData.OrganisationUnits.OrganisationUnit that = ((MetaData.OrganisationUnits.OrganisationUnit) object);
                {
                    OrgUnitType lhsParent;
                    lhsParent = this.getParent();
                    OrgUnitType rhsParent;
                    rhsParent = that.getParent();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "parent", lhsParent), LocatorUtils.property(thatLocator, "parent", rhsParent), lhsParent, rhsParent)) {
                        return false;
                    }
                }
                {
                    XMLGregorianCalendar lhsOpeningDate;
                    lhsOpeningDate = this.getOpeningDate();
                    XMLGregorianCalendar rhsOpeningDate;
                    rhsOpeningDate = that.getOpeningDate();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "openingDate", lhsOpeningDate), LocatorUtils.property(thatLocator, "openingDate", rhsOpeningDate), lhsOpeningDate, rhsOpeningDate)) {
                        return false;
                    }
                }
                {
                    Boolean lhsActive;
                    lhsActive = this.isActive();
                    Boolean rhsActive;
                    rhsActive = that.isActive();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "active", lhsActive), LocatorUtils.property(thatLocator, "active", rhsActive), lhsActive, rhsActive)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = super.hashCode(locator, strategy);
                {
                    OrgUnitType theParent;
                    theParent = this.getParent();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "parent", theParent), currentHashCode, theParent);
                }
                {
                    XMLGregorianCalendar theOpeningDate;
                    theOpeningDate = this.getOpeningDate();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "openingDate", theOpeningDate), currentHashCode, theOpeningDate);
                }
                {
                    Boolean theActive;
                    theActive = this.isActive();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "active", theActive), currentHashCode, theActive);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                super.copyTo(locator, draftCopy, strategy);
                if (draftCopy instanceof MetaData.OrganisationUnits.OrganisationUnit) {
                    final MetaData.OrganisationUnits.OrganisationUnit copy = ((MetaData.OrganisationUnits.OrganisationUnit) draftCopy);
                    if (this.parent!= null) {
                        OrgUnitType sourceParent;
                        sourceParent = this.getParent();
                        OrgUnitType copyParent = ((OrgUnitType) strategy.copy(LocatorUtils.property(locator, "parent", sourceParent), sourceParent));
                        copy.setParent(copyParent);
                    } else {
                        copy.parent = null;
                    }
                    if (this.openingDate!= null) {
                        XMLGregorianCalendar sourceOpeningDate;
                        sourceOpeningDate = this.getOpeningDate();
                        XMLGregorianCalendar copyOpeningDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "openingDate", sourceOpeningDate), sourceOpeningDate));
                        copy.setOpeningDate(copyOpeningDate);
                    } else {
                        copy.openingDate = null;
                    }
                    if (this.active!= null) {
                        Boolean sourceActive;
                        sourceActive = this.isActive();
                        Boolean copyActive = ((Boolean) strategy.copy(LocatorUtils.property(locator, "active", sourceActive), sourceActive));
                        copy.setActive(copyActive);
                    } else {
                        copy.active = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new MetaData.OrganisationUnits.OrganisationUnit();
            }

        }

    }

}
